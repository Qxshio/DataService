"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4],{2547:e=>{e.exports=JSON.parse('{"functions":[{"name":"_constructData","desc":"Recursively processes a data template to extract and store whitelisted paths and leaderstat settings.\\nModifies the template in-place by replacing template option tables with their `.value` fields.","params":[{"name":"template","desc":"The nested table structure defining data schema and metadata (e.g., whitelisted, leaderstats)","lua_type":"{}"},{"name":"currentPath","desc":"(Optional) The current string path used during recursion","lua_type":"string?"}],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"method","ignore":true,"source":{"line":75,"path":"src/shared/DataService/DataServer.luau"}},{"name":"_buildLeaderstats","desc":"Creates or updates the \\"leaderstats\\" folder for a player based on configured leaderstat settings.\\nFetches values from the player\'s data and applies optional formatting before assigning them to leaderstats.","params":[{"name":"Player","desc":"The player for whom leaderstats should be created or updated","lua_type":"Player"}],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"method","ignore":true,"source":{"line":116,"path":"src/shared/DataService/DataServer.luau"}},{"name":"init","desc":"Initializes the service and sets up key prerequisites to use in later functions. Must be called from a server-script","params":[{"name":"options","desc":"The table of options that determines the behaviour of the service","lua_type":"DataServiceOptions"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","source":{"line":145,"path":"src/shared/DataService/DataServer.luau"}},{"name":"getData","desc":"Retrieves all data or a player\'s profile data if a player is provided.\\nIf player data hasn\'t loaded yet, function will yield until their data is loaded.","params":[{"name":"Player","desc":"The player who\'s data you want to retrieve","lua_type":"Player?"}],"returns":[{"desc":"Live, Mock","lua_type":"{}, {}"}],"function_type":"method","source":{"line":190,"path":"src/shared/DataService/DataServer.luau"}},{"name":"fetch","desc":"Fetches the value at the given string path from a player\'s data.","params":[{"name":"Player","desc":"The player whose data is being accessed","lua_type":"Player"},{"name":"stringPath","desc":"The string path pointing to the desired data within the player\'s profile","lua_type":"string"}],"returns":[{"desc":"The value retrieved from the specified path in the player\'s data","lua_type":"any"}],"function_type":"method","source":{"line":212,"path":"src/shared/DataService/DataServer.luau"}},{"name":"awaitPlayerDataAsync","desc":"Waits asynchronously until a player\'s data has been loaded.","params":[{"name":"Player","desc":"The player whose data you are waiting for","lua_type":"Player | { Player }"}],"returns":[{"desc":"Returns when the data is available","lua_type":"()"}],"function_type":"method","source":{"line":229,"path":"src/shared/DataService/DataServer.luau"}},{"name":"setData","desc":"Sets the index to the given value for all the players provided\\n\\nExample:\\n```lua\\nlocal Cash = DataService:fetch(Player, \\"Cash\\") -- 250\\nDataService:setData(Player, \\"Cash\\", Cash * 2)\\nprint(DataService:fetch(Player, \\"Cash\\")) -- 500\\n```\\nOR\\n```lua\\nDataService:setData(Player, \\"Cash\\", function(OldCash: any)\\n\\treturn OldCash * 2\\nend) -- 500\\n```","params":[{"name":"Player","desc":"The player(s) who\'s data you want modify","lua_type":"Player | { Player }"},{"name":"stringPath","desc":"The string path of the index you want to modify e.g. ``Settings.MaxVolume``","lua_type":"string"},{"name":"value","desc":"The value or function you want to modify the index with","lua_type":"any"},{"name":"useMock","desc":"Whether or not the function should ONLY set the value in the mock data, otherwise both live and mock will be updated","lua_type":"boolean?"},{"name":"fromClient","desc":"Whether or not security should be enabled, this should only be used if you\'re using client data to determine value allocation","lua_type":"boolean?"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","source":{"line":280,"path":"src/shared/DataService/DataServer.luau"}},{"name":"setAllData","desc":"Sets the index to the given value for every player","params":[{"name":"stringPath","desc":"The string path of the index you want to modify e.g. ``Settings.MaxVolume``","lua_type":"string"},{"name":"value","desc":"The value you want to modify the index(s) with","lua_type":"any"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","source":{"line":323,"path":"src/shared/DataService/DataServer.luau"}},{"name":"setAllDataExcept","desc":"Sets the index to the given value for every player","params":[{"name":"Player","desc":"The player(s) who you want to exclude from the modification","lua_type":"Player | { Player }"},{"name":"stringPath","desc":"The string path of the index you want to modify e.g. ``Settings.MaxVolume``","lua_type":"string"},{"name":"value","desc":"The value you want to modify the index(s) with","lua_type":"any"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","source":{"line":337,"path":"src/shared/DataService/DataServer.luau"}},{"name":"removeData","desc":"Removes a player\'s data from the profile store using their UserId.\\nPrimarily used for data wipes or resets. Only allowed in studio.","params":[{"name":"UserID","desc":"The UserId of the player whose data should be removed","lua_type":"number"}],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"method","errors":[{"lua_type":"RUN_ERR","desc":"Occurs if game instance is running"}],"source":{"line":358,"path":"src/shared/DataService/DataServer.luau"}},{"name":"checkInit","desc":"Returns true if the service has been initialized, otherwise false","params":[],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","source":{"line":371,"path":"src/shared/DataService/DataServer.luau"}},{"name":"_enforceInit","desc":"Asserts that the DataService has been initialized.","params":[],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","errors":[{"lua_type":"boot_error","desc":"Throws if the service is not initialized"}],"source":{"line":382,"path":"src/shared/DataService/DataServer.luau"}},{"name":"_playerAdded","desc":"Attempts to load player data and replicates the retrieved data to the client. ","params":[{"name":"Player","desc":"","lua_type":"Player"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","errors":[{"lua_type":"You should not use this function as players are automatically detected and this function is called once the service is initialized","desc":""}],"source":{"line":393,"path":"src/shared/DataService/DataServer.luau"}},{"name":"_playerRemoving","desc":"Attempts to save player data","params":[{"name":"Player","desc":"","lua_type":"Player"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","errors":[{"lua_type":"You should not use this function as players are automatically detected and this function is called once they leave","desc":""}],"source":{"line":433,"path":"src/shared/DataService/DataServer.luau"}},{"name":"cleanup","desc":"Cleans up a player\'s profile store, should their session end","params":[{"name":"Key","desc":"The key for the data you want to cleanup","lua_type":"string"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","ignore":true,"source":{"line":455,"path":"src/shared/DataService/DataServer.luau"}}],"properties":[],"types":[{"name":"templateOption","desc":"The options to provide in the template","lua_type":"{ value: any, readonly: boolean?, createLeaderstat: { Name: string, Format: (Value: any) -> string }?, whitelisted: boolean?, savingEnabled: boolean? }","source":{"line":34,"path":"src/shared/DataService/DataServer.luau"}},{"name":"DataServiceOptions","desc":"The options to provide in the :init() function","lua_type":"{  template: { [string]: any },  Whitelist: { any }?,  enforceReferentialIntegrity: ((Player) -> ())?,  useMock: boolean?,  yieldFunctionsUntilLoaded: boolean? }","source":{"line":47,"path":"src/shared/DataService/DataServer.luau"}}],"name":"DataService","desc":"DataService server handles all backend datastore setup and enables replication to the client","realm":["Server"],"source":{"line":21,"path":"src/shared/DataService/DataServer.luau"}}')}}]);